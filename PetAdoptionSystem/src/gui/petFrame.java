/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

/**
 *
 * @author joshu
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Vector;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.Color;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.Font;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import dbconnection.ConnectionMySQL;
import javax.swing.SwingUtilities;


public class petFrame extends javax.swing.JFrame {

    /**
     * Creates new form petFrame
     */
    private int selectedRowIndex = -1;
    private adoptForm adoptWindow;  // Declare this at the class level

    private adopterFrame adopter;
     
    public petFrame() {
        setTitle("Pet Adoption System");
        initComponents();
        loadPetData();
        
        petTable.getTableHeader().setBackground(Color.BLACK);
        petTable.getTableHeader().setForeground(Color.WHITE);
        petTable.getTableHeader().setForeground(Color.BLACK);
        petTable.getTableHeader().setFont(new Font("Arial", Font.PLAIN, 12));
        setSize(800, 650);
        setLocationRelativeTo(null); // Center on screen

        // Disable buttons initially
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
        adoptButton.setEnabled(false);
        
       
        addTableClickListener();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        updateButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        adoptButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        petTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(225, 235, 254));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 650));

        jPanel2.setBackground(new java.awt.Color(118, 111, 255));

        updateButton.setText("UPDATE PET");
        updateButton.setBorder(null);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        addButton.setText("ADD PET");
        addButton.setBorder(null);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        adoptButton.setText("ADOPT!");
        adoptButton.setBorder(null);
        adoptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adoptButtonActionPerformed(evt);
            }
        });

        exitButton.setText("EXIT");
        exitButton.setBorder(null);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("DELETE");
        deleteButton.setBorder(null);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(adoptButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(adoptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
        );

        petTable.setBackground(new java.awt.Color(255, 255, 255));
        petTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Pet ID", "Pet Name", "Species", "Breed", "Age", "Status"
            }
        ));
        jScrollPane1.setViewportView(petTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 27, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addTableClickListener() {
            petTable.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    selectedRowIndex = petTable.getSelectedRow();
                    if (selectedRowIndex != -1) {
                        updateButton.setEnabled(true);
                        deleteButton.setEnabled(true);
                        adoptButton.setEnabled(true);
                    }
                }
            });
    }
    
    public int getSelectedPetId() {
        int selectedRow = petTable.getSelectedRow(); // Replace petTable with your actual JTable variable name

        if (selectedRow == -1) {
            throw new IllegalStateException("Please select a pet from the table.");
        }

        // Assuming PetID is in column 0
        Object petIdValue = petTable.getValueAt(selectedRow, 0);
        return Integer.parseInt(petIdValue.toString());
    }
    
    

    
    
   // Load pet data from the database
    public void loadPetData() {
    DefaultTableModel model = (DefaultTableModel) petTable.getModel();
    model.setRowCount(0); // Clear any existing rows

    String sql = "SELECT PetID, PetName, Species, Breed, Age, Status FROM pets";

    try (Connection conn = ConnectionMySQL.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery()) {

        // Loop through the result set and add rows to the table
        while (rs.next()) {
            Object[] row = new Object[6];
            row[0] = rs.getInt("PetID");
            row[1] = rs.getString("PetName");
            row[2] = rs.getString("Species");
            row[3] = rs.getString("Breed");
            row[4] = rs.getInt("Age");
            row[5] = rs.getString("Status");
            model.addRow(row);
        }
        
        // Optionally force the table to update:
        petTable.revalidate();
        petTable.repaint();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading table data: " + e.getMessage());
    }
}

    
    private void adoptSelectedPet() {
      int selectedRow = petTable.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a pet to adopt.");
            return;
        }

        // Get PetID from the selected row
        int petId = (int) petTable.getValueAt(selectedRow, 0); // assuming PetID is in column 0
        String currentStatus = petTable.getValueAt(selectedRow, 5).toString(); // assuming status is column 5

        if ("Adopted".equalsIgnoreCase(currentStatus)) {
            JOptionPane.showMessageDialog(this, "This pet has already been adopted.");
            return;
        }
}


    
    
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
       addForm add = new addForm(this);
       add.setVisible(true);
    

    }//GEN-LAST:event_addButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
       MainFrame main = new MainFrame();
       main.setVisible(true);
       this.dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        int selectedRow = petTable.getSelectedRow(); // Your table name here

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a pet to update.");
            return;
        }

        // ✅ Get values from selected row (adjust indexes based on your table column order)
        int petID = (int) petTable.getValueAt(selectedRow, 0);
        String petName = petTable.getValueAt(selectedRow, 1).toString();
        String species = petTable.getValueAt(selectedRow, 2).toString();
        String breed = petTable.getValueAt(selectedRow, 3).toString();
        int age = Integer.parseInt(petTable.getValueAt(selectedRow, 4).toString());
        String status = petTable.getValueAt(selectedRow, 5).toString();

        // ✅ Open the updateForm with data
        updateForm updatePetForm = new updateForm(this, petID, petName, species, breed, age, status);
        updatePetForm.setVisible(true);
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
       int selectedRow = petTable.getSelectedRow(); // Get selected row index

        if (selectedRow == -1) { // No row selected
            JOptionPane.showMessageDialog(this, "Please select a pet to delete.");
            return;
        }

        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this pet?", 
                                                    "Delete Confirmation", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        // Get PetID from the selected row (assuming PetID is in column 0)
        int petID = (int) petTable.getValueAt(selectedRow, 0);

        try (Connection conn = ConnectionMySQL.getConnection();
             PreparedStatement stmt = conn.prepareStatement("DELETE FROM pets WHERE PetID = ?")) {

            stmt.setInt(1, petID);
            int rowsAffected = stmt.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Pet deleted successfully!");
                loadPetData(); // ✅ Refresh table
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete pet.");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void adoptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adoptButtonActionPerformed
            int selectedRow = petTable.getSelectedRow();

            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a pet to adopt.");
                return;
            }

            // Get PetID from the selected row
            int petId = (int) petTable.getValueAt(selectedRow, 0); // assuming PetID is in column 0
            String currentStatus = petTable.getValueAt(selectedRow, 5).toString(); // assuming status is in column 5

            if ("Adopted".equalsIgnoreCase(currentStatus)) {
                JOptionPane.showMessageDialog(this, "This pet has already been adopted.");
                return;
            }

            // Only open a new form if none is open
            if (adoptWindow == null) {
            adopterFrame adopter = new adopterFrame(); // ✅ create adopter frame
            adoptWindow = new adoptForm(adopter, petId); // ✅ pass it to adoptForm
            adoptWindow.setVisible(true);

            adoptWindow.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent e) {
                    adoptWindow = null;
                }
            });
        } else {
            adoptWindow.setVisible(true);
        }
    }//GEN-LAST:event_adoptButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(petFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(petFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(petFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(petFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new petFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton adoptButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable petTable;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
